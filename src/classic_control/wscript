#!/usr/bin/env python
# encoding: utf-8
#| Copyright Inria July 2017
#| This project has received funding from the European Research Council (ERC) under
#| the European Union's Horizon 2020 research and innovation programme (grant
#| agreement No 637972) - see http://www.resibots.eu
#|
#| Contributor(s):
#|   - Konstantinos Chatzilygeroudis (konstantinos.chatzilygeroudis@inria.fr)
#|   - Rituraj Kaushik (rituraj.kaushik@inria.fr)
#|   - Roberto Rama (bertoski@gmail.com)
#|
#| This software is a computer library whose purpose is to optimize continuous,
#| black-box functions. It mainly implements Gaussian processes and Bayesian
#| optimization.
#| Main repository: http://github.com/resibots/blackdrops
#|
#| This software is governed by the CeCILL-C license under French law and
#| abiding by the rules of distribution of free software.  You can  use,
#| modify and/ or redistribute the software under the terms of the CeCILL-C
#| license as circulated by CEA, CNRS and INRIA at the following URL
#| "http://www.cecill.info".
#|
#| As a counterpart to the access to the source code and  rights to copy,
#| modify and redistribute granted by the license, users are provided only
#| with a limited warranty  and the software's author,  the holder of the
#| economic rights,  and the successive licensors  have only  limited
#| liability.
#|
#| In this respect, the user's attention is drawn to the risks associated
#| with loading,  using,  modifying and/or developing or reproducing the
#| software by the user in light of its specific status of free software,
#| that may mean  that it is complicated to manipulate,  and  that  also
#| therefore means  that it is reserved for developers  and  experienced
#| professionals having in-depth computer knowledge. Users are therefore
#| encouraged to load and test the software's suitability as regards their
#| requirements in conditions enabling the security of their systems and/or
#| data to be ensured and,  more generally, to use and operate it in the
#| same conditions as regards security.
#|
#| The fact that you are presently reading this means that you have had
#| knowledge of the CeCILL-C license and that you accept its terms.
#|
import limbo
import glob

def build(bld):
    libs = 'TBB EIGEN BOOST LIMBO LIBCMAES NLOPT SFERES2 BOOST_CHRONO RT SDL '

    cxxflags = bld.get_env()['CXXFLAGS']

    limbo.create_variants(bld,
                      source='cartpole.cpp',
                      includes='. ../../../../src ../ ../../include',
                      target='cartpole',
                      uselib=libs,
                      uselib_local='limbo',
                      cxxflags = cxxflags + ['-D NODSP'],
                      variants = ['SIMU', 'SIMU MEAN', 'SIMU MEAN MODELIDENT', 'SIMU MEAN MODELIDENT ONLYMI', 'SIMU SPGPS', 'SIMU GPPOLICY', 'SIMU GPPOLICY SPGPS'])

    limbo.create_variants(bld,
                      source='pendulum.cpp',
                      includes='. ../../../../src ../ ../../include',
                      target='pendulum',
                      uselib=libs,
                      uselib_local='limbo',
                      cxxflags = cxxflags + ['-D NODSP'],
                      variants = ['SIMU', 'SIMU GPPOLICY', 'SIMU LINEAR'])

    if bld.env.DEFINES_SDL:
        limbo.create_variants(bld,
                        source='cartpole.cpp',
                        includes='. ../../../../src ../ ../../include',
                        target='cartpole',
                        uselib=libs,
                        uselib_local='limbo',
                        cxxflags = cxxflags,
                        variants = ['GRAPHIC', 'GRAPHIC MEAN', 'GRAPHIC MEAN MODELIDENT', 'GRAPHIC MEAN MODELIDENT ONLYMI', 'GRAPHIC SPGPS', 'GRAPHIC GPPOLICY', 'GRAPHIC GPPOLICY SPGPS'])
        limbo.create_variants(bld,
                        source='pendulum.cpp',
                        includes='. ../../../../src ../ ../../include',
                        target='pendulum',
                        uselib=libs,
                        uselib_local='limbo',
                        cxxflags = cxxflags,
                        variants = ['GRAPHIC', 'GRAPHIC GPPOLICY', 'GRAPHIC LINEAR'])

    # Find new targets
    files = glob.glob(bld.path.abspath()+"/*.cpp")
    new_targets = []
    for f in files:
        target_name = f[f.rfind('/')+1:-4]
        # Ignore our sample scenarios
        if target_name != 'cartpole' and target_name != 'pendulum':
            new_targets.append(target_name)

    # Compile new targets
    for target in new_targets:
        limbo.create_variants(bld,
                        source=target+'.cpp',
                        includes='. ../../../../src ../ ../../include',
                        target=target,
                        uselib=libs,
                        uselib_local='limbo',
                        cxxflags = cxxflags + ['-D NODSP'],
                        variants = ['SIMU'])

        if bld.env.DEFINES_SDL:
            limbo.create_variants(bld,
                            source=target+'.cpp',
                            includes='. ../../../../src ../ ../../include',
                            target=target,
                            uselib=libs,
                            uselib_local='limbo',
                            cxxflags = cxxflags,
                            variants = ['GRAPHIC'])